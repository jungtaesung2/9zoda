// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId Int @id @default(autoincrement()) @map("userId")
  email String @unique @map("email")
  password String @map("password")
  name String @map("name")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  reservation Reservation[]
  review Review[]

  @@map("Users")
}

model Petsitter {
  sitterId Int @id @default(autoincrement()) @map("sitterId")
  name String @map("name")
  career Int @map("career")
  region String @map("region")

  reservation Reservation[]
  review Review[]

  @@map("Petsitter")
}

model Reservation {
  postId Int @id @default(autoincrement()) @map("postId")
  userId Int @map("userId")
  sitterId Int @map("sitterId")
  reservation String @map("reservation")
  petName String @map("petName")
  petType Type @map("petType")
  request String @db.Text @map("request")
  date String @unique @map("date")

  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  petsitter Petsitter @relation(fields: [sitterId], references: [sitterId], onDelete: Cascade)

  @@map("Reservation")
}

enum Type {
  small 
  middle
  large
}

model Review {
  reviewId Int @id @default(autoincrement()) @map("reviewId")
  userId Int @map("userId")
  sitterId Int @map("sitterId")
  title String @map("title")
  rating Int @map("rating")
  content String @db.Text @map("content")
  image String? @map("image")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  petsitter Petsitter @relation(fields: [sitterId], references: [sitterId], onDelete: Cascade)

  @@map("Review")
}

model DateInfo {
  dateId Int @id @default(autoincrement()) @map("dateId")
  date String @unique @map("date")

  @@map("DateInfo")
}
